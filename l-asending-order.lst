


ARM Macro Assembler    Page 1 


    1 00000000         ; BUBBLE SORT
    2 00000000                 AREA             RESET, DATA, READONLY
    3 00000000                 EXPORT           __Vectors
    4 00000000         
    5 00000000         __Vectors
    6 00000000 10001000        DCD              0x10001000  ; stack pointer val
                                                            ue when stack is em
                                                            pty
    7 00000004 00000000        DCD              Reset_Handler ; reset vector
    8 00000008         
    9 00000008                 ALIGN
   10 00000008                 AREA             mycode, CODE, READONLY
   11 00000000                 ENTRY
   12 00000000                 EXPORT           Reset_Handler
   13 00000000         
   14 00000000         Reset_Handler
   15 00000000 F04F 5080       LDR              R0, =0X10000000 ; Load R0 with 
                                                            RAM location load m
                                                            em with 50, 25, 5, 
                                                            20, 10 (4 byte Boun
                                                            dry)
   16 00000004 F04F 0105       MOV              R1, #5      ;Initialize the num
                                                            ber 'n' of elements
                                                             in an array
   17 00000008 1E49            SUBS             R1, R1, #1  ;Decrement R1 by 1.
                                                             to perform '5-1' c
                                                            omparison.
   18 0000000A         OUTLOOP
   19 0000000A 460B            MOV              R3, R1      ;R3 is used as coun
                                                            ter for inloop
   20 0000000C F04F 5080       MOV              R0, #0X10000000 ;Initialize RO 
                                                            with starting addre
                                                            ss of Data 
   21 00000010         INLOOP
   22 00000010 F850 2B04       LDR              R2,[R0],#4  ;R2 is loaded with 
                                                            first array number.
                                                             After loading addr
                                                            ess is incremented
   23 00000014 6804            LDR              R4, [R0]    ;R4 is loaded with 
                                                            second array Number
                                                            
   24 00000016 4294            CMP              R4, R2      ;Compare first and 
                                                            second array elemen
                                                            ts
   25 00000018 D203            BCS              SKIP        ;Check carry flag. 
                                                            If C flag = 1
   26 0000001A F840 2904       STR              R2,[R0], #-4 ;If C = 0, then st
                                                            ore R2 content in a
                                                            ddress present in R
                                                            0.
   27 0000001E F840 4B04       STR              R4, [R0], #4 ; store R4 content
                                                             in new RO location
                                                            . then again increm
                                                            ent R0 
   28 00000022         SKIP
   29 00000022 1E5B            SUBS             R3, R3, #1  ;Decrement R3 by 1 
                                                            
   30 00000024 D1F4            BNE              INLOOP      ; If R3 is not equa
                                                            l to 0 Branch to la



ARM Macro Assembler    Page 2 


                                                            bel INLOOP 
   31 00000026 1E49            SUBS             R1, R1,#1   ;Decrement R1 by 1
   32 00000028 D1EF            BNE              OUTLOOP
   33 0000002A         
   34 0000002A BF00            NOP
   35 0000002C                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\l-asen
ding-order.d -o.\l-asending-order.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\
Include -IC:\Keil\ARM\Inc\NXP\LPC17xx --predefine="__EVAL SETA 1" --list=.\l-as
ending-order.lst L-asending-order.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 2 in file L-asending-order.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 5 in file L-asending-order.s
   Uses
      At line 3 in file L-asending-order.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

INLOOP 00000010

Symbol: INLOOP
   Definitions
      At line 21 in file L-asending-order.s
   Uses
      At line 30 in file L-asending-order.s
Comment: INLOOP used once
OUTLOOP 0000000A

Symbol: OUTLOOP
   Definitions
      At line 18 in file L-asending-order.s
   Uses
      At line 32 in file L-asending-order.s
Comment: OUTLOOP used once
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 14 in file L-asending-order.s
   Uses
      At line 7 in file L-asending-order.s
      At line 12 in file L-asending-order.s

SKIP 00000022

Symbol: SKIP
   Definitions
      At line 28 in file L-asending-order.s
   Uses
      At line 25 in file L-asending-order.s
Comment: SKIP used once
mycode 00000000

Symbol: mycode
   Definitions
      At line 10 in file L-asending-order.s
   Uses
      None
Comment: mycode unused
5 symbols
338 symbols in table
